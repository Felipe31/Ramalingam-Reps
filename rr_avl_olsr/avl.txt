# 1 "avl.h"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "avl.h"
# 49 "avl.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4

# 149 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 328 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef int wchar_t;
# 426 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 50 "avl.h" 2

# 1 "common_types.h" 1
# 49 "common_types.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 50 "common_types.h" 2
# 101 "common_types.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 25 "/usr/include/limits.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 361 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 362 "/usr/include/features.h" 2 3 4
# 385 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 386 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/limits.h" 2 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 102 "common_types.h" 2



# 1 "/usr/include/inttypes.h" 1 3 4
# 27 "/usr/include/inttypes.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 36 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;

typedef long int int64_t;







typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 119 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdint.h" 2 3 4
# 28 "/usr/include/inttypes.h" 2 3 4






typedef int __gwchar_t;
# 266 "/usr/include/inttypes.h" 3 4





typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,
      __gwchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,
       __gwchar_t ** __restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/inttypes.h" 3 4

# 106 "common_types.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdbool.h" 1 3 4
# 107 "common_types.h" 2
# 52 "avl.h" 2
# 1 "list.h" 1
# 49 "list.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 50 "list.h" 2

# 1 "container_of.h" 1
# 49 "container_of.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 50 "container_of.h" 2
# 75 "container_of.h"

# 75 "container_of.h"
static inline __attribute__((always_inline)) void *
__container_of_if_notnull(void *ptr, size_t offset) {
  return ptr == 
# 77 "container_of.h" 3 4
               ((void *)0) 
# 77 "container_of.h"
                    ? 
# 77 "container_of.h" 3 4
                      ((void *)0) 
# 77 "container_of.h"
                           : (((uint8_t *)ptr) - offset);
}
# 52 "list.h" 2
# 60 "list.h"
struct list_entity {

  struct list_entity *next;


  struct list_entity *prev;
};





static inline __attribute__((always_inline)) void
list_init_head(struct list_entity *head) {
  head->next = head->prev = head;
}





static inline __attribute__((always_inline)) void
list_init_node(struct list_entity *entity) {
  entity->next = entity->prev = 
# 83 "list.h" 3 4
                               ((void *)0)
# 83 "list.h"
                                   ;
}







static inline __attribute__((always_inline)) void
__list_add(struct list_entity *prev, struct list_entity *next, struct list_entity *new) {
  new->next = next;
  new->prev = prev;
  next->prev = new;
  prev->next = new;
}






static inline __attribute__((always_inline)) void
list_add_head(struct list_entity *head, struct list_entity *new) {
  __list_add(head, head->next, new);
}






static inline __attribute__((always_inline)) void
list_add_tail(struct list_entity *head, struct list_entity *new) {
  __list_add(head->prev, head, new);
}






static inline __attribute__((always_inline)) void
list_add_before(struct list_entity *before, struct list_entity *new) {
  __list_add(before->prev, before, new);
}






static inline __attribute__((always_inline)) void
list_add_after(struct list_entity *after, struct list_entity *new) {
  __list_add(after, after->next, new);
}






static inline __attribute__((always_inline)) void
__list_remove(struct list_entity *prev, struct list_entity *next) {
  prev->next = next;
  next->prev = prev;
}





static inline __attribute__((always_inline)) void
list_remove(struct list_entity *entity) {
  __list_remove(entity->prev, entity->next);
  list_init_node(entity);
}






static inline __attribute__((always_inline)) 
# 166 "list.h" 3 4
             _Bool

# 167 "list.h"
list_is_empty(struct list_entity *head) {
  return head->next == head && head->prev == head;
}







static inline __attribute__((always_inline)) 
# 177 "list.h" 3 4
             _Bool

# 178 "list.h"
list_is_node_added(struct list_entity *node) {
  return node->next != 
# 179 "list.h" 3 4
                      ((void *)0) 
# 179 "list.h"
                           && node->prev != 
# 179 "list.h" 3 4
                                            ((void *)0)
# 179 "list.h"
                                                ;
}







static inline __attribute__((always_inline)) 
# 188 "list.h" 3 4
             _Bool

# 189 "list.h"
list_is_first(const struct list_entity *head, const struct list_entity *entity) {
  return head->next == entity;
}







static inline __attribute__((always_inline)) 
# 199 "list.h" 3 4
             _Bool

# 200 "list.h"
list_is_last(const struct list_entity *head, const struct list_entity *entity) {
  return head->prev == entity;
}







static inline __attribute__((always_inline)) void
list_merge(struct list_entity *add_to, struct list_entity *remove_from) {
  if (list_is_empty(remove_from)) {
    return;
  }

  add_to->next->prev = remove_from->prev;
  remove_from->prev->next = add_to->next;
  add_to->next = remove_from->next;
  remove_from->next->prev = add_to;

  list_init_head(remove_from);
}
# 53 "avl.h" 2






struct avl_node {







  struct list_entity list;




  struct avl_node *parent;




  struct avl_node *left;




  struct avl_node *right;




  const void *key;




  signed char balance;





  
# 98 "avl.h" 3 4
 _Bool 
# 98 "avl.h"
      follower;
};





struct avl_tree {




  struct list_entity list_head;




  struct avl_node *root;




  uint32_t count;





  
# 126 "avl.h" 3 4
 _Bool 
# 126 "avl.h"
      allow_dups;







  int (*comp)(const void *k1, const void *k2);
};

__attribute__((visibility ("default"))) void avl_init(struct avl_tree *,
    int (*comp) (const void *k1, const void *k2), 
# 138 "avl.h" 3 4
                                                 _Bool
# 138 "avl.h"
                                                     );
__attribute__((visibility ("default"))) struct avl_node *avl_find(const struct avl_tree *, const void *);
__attribute__((visibility ("default"))) struct avl_node *avl_find_greaterequal(const struct avl_tree *tree, const void *key);
__attribute__((visibility ("default"))) struct avl_node *avl_find_lessequal(const struct avl_tree *tree, const void *key);
__attribute__((visibility ("default"))) int avl_insert(struct avl_tree *, struct avl_node *);
__attribute__((visibility ("default"))) void avl_remove(struct avl_tree *, struct avl_node *);






static inline __attribute__((always_inline)) 
# 150 "avl.h" 3 4
             _Bool

# 151 "avl.h"
avl_is_first(struct avl_tree *tree, struct avl_node *node) {
  return tree->list_head.next == &node->list;
}






static inline __attribute__((always_inline)) 
# 160 "avl.h" 3 4
             _Bool

# 161 "avl.h"
avl_is_last(struct avl_tree *tree, struct avl_node *node) {
  return tree->list_head.prev == &node->list;
}





static inline __attribute__((always_inline)) 
# 169 "avl.h" 3 4
             _Bool

# 170 "avl.h"
avl_is_empty(struct avl_tree *tree) {
  return tree->count == 0;
}





static inline __attribute__((always_inline)) 
# 178 "avl.h" 3 4
             _Bool

# 179 "avl.h"
avl_is_node_added(struct avl_node *node) {
  return list_is_node_added(&node->list);
}
# 193 "avl.h"
static inline __attribute__((always_inline)) void __attribute__((deprecated))
avl_delete(struct avl_tree *tree, struct avl_node *node) {
  avl_remove(tree, node);
}
